/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.bms.ui.investmentbank;

import com.bms.model.investmentbank.AccountProfile;
import com.bms.model.investmentbank.StockProfile;
import java.awt.Button;
import java.awt.CardLayout;
import java.awt.GridLayout;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author asawari
 */
public class BuySellShareJPanel extends javax.swing.JPanel {

    /**
     * Creates new form BuySellShareJPanel
     */
    AccountProfile accProfile;
    StockProfile[][] stocks;
    
    JPanel cards;
    CardLayout cl;
    public BuySellShareJPanel(AccountProfile profile, StockProfile[][] stockProfiles) {
        initComponents();
        System.out.println("inside BuySellShareJPanel");
        accProfile = profile;
        stocks = stockProfiles;

        this.stocks = new StockProfile[8][8];
 
        JPanel BuySellShareJPanel = new JPanel();
        BuySellShareJPanel.setLayout(new GridLayout(3, 2, 5, 5));
  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblshareName = new javax.swing.JLabel();
        lblquantity = new javax.swing.JLabel();
        names = new javax.swing.JComboBox<>();
        strQuantity = new javax.swing.JTextField();
        btnBuy = new javax.swing.JButton();
        btnSell = new javax.swing.JButton();

        lblshareName.setText("Share Name:");

        lblquantity.setText("Quantity:");

        names.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "EUR-USD", "GBP-USD", "EUR-GBP", "GBP-JPY", "Facebook", "Apple", "Microsoft", "BMW" }));

        btnBuy.setText("Buy");
        btnBuy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuyActionPerformed(evt);
            }
        });

        btnSell.setText("Sell");
        btnSell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSellActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblquantity)
                        .addComponent(lblshareName))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(btnBuy)))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSell)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(strQuantity)
                        .addComponent(names, 0, 124, Short.MAX_VALUE)))
                .addContainerGap(93, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblshareName)
                    .addComponent(names, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblquantity)
                    .addComponent(strQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuy)
                    .addComponent(btnSell))
                .addContainerGap(66, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuyActionPerformed
        // TODO add your handling code here:
        
        String stockName = (String) names.getSelectedItem();
        System.out.println("inside btnBuyActionPerformed"+stockName);
        int quantity = Integer.parseInt(strQuantity.getText());
        StockProfile stockToBuySell = searchAvailableStock(stockName);
        System.out.println("inside btnBuyActionPerformed");
        if (stockToBuySell != null) {

                buyStock(stockToBuySell, quantity);
   
        }

        
    }//GEN-LAST:event_btnBuyActionPerformed

    private void btnSellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSellActionPerformed
        // TODO add your handling code here:
        String btnName = evt.getActionCommand();;
        String stockName = (String) names.getSelectedItem();
        int quantity = Integer.parseInt(strQuantity.getText());
        StockProfile stockToBuySell = searchAvailableStock(stockName);
        
        if (btnName.equals("Sell")) {
                        StockProfile stock = searchBoughtStock(stockName);
                        if (stock != null) {
                            sellStock(stock, quantity, stockName);
                        } else {
                            JOptionPane.showMessageDialog(null, "You Don't Own This Stock", "ERROR",
                                    JOptionPane.WARNING_MESSAGE);
                        }
                    }
    }//GEN-LAST:event_btnSellActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuy;
    private javax.swing.JButton btnSell;
    private javax.swing.JLabel lblquantity;
    private javax.swing.JLabel lblshareName;
    private javax.swing.JComboBox<String> names;
    private javax.swing.JTextField strQuantity;
    // End of variables declaration//GEN-END:variables

    // Method that called when user wants to buy a stock
    public void buyStock(StockProfile profile, int quantity) {
        double price = profile.getBuyPrice() * quantity;
        
        if (price < accProfile.getBalance()) {
            StockProfile stock = new StockProfile(profile.getProfileName(),
                    profile.getSellPrice(), profile.getBuyPrice(), quantity);
            accProfile.setBalance(-price);
            accProfile.addStock(stock);

            displayNewBalance();

        } else {
            JOptionPane.showMessageDialog(null, "You Don't Have Enough Money", "ERROR",
                    JOptionPane.WARNING_MESSAGE);

        }

    }
    
    // Method that is called when user wants to sell a stock
    public void sellStock(StockProfile profile, int quantity, String stockName) {

        if (quantity <= profile.getQuantity()) {

            double price = profile.getSellPrice() * quantity;
            accProfile.setBalance(+price);
            if (quantity == profile.getQuantity()) {
                accProfile.removeStock(profile);
            } else {
                profile.setQuantity(profile.getQuantity() - quantity);
            }

            displayNewBalance();

        } else {
            JOptionPane.showMessageDialog(null, "You Do Not Own This Many Stock", "Error",
                    JOptionPane.WARNING_MESSAGE);
        }

    }
    
    //Method to display new balance
    public void displayNewBalance(){
        JOptionPane.showMessageDialog(null, "Balance: " + roundTo2DP(accProfile.getBalance()),
                    "Successful Sell", JOptionPane.WARNING_MESSAGE);
    }

    // Method to search account profile for a stock (used when user is selling stock)
    public StockProfile searchBoughtStock(String stockName) {
        ArrayList<StockProfile> stocksBought = accProfile.getStocks();
        for (int i = 0; i < stocksBought.size(); i++) {
            if (stocksBought.get(i).getProfileName().equalsIgnoreCase(stockName)) {
                return stocksBought.get(i);
            }
        }
        return null;
    }

    // Method to search  for a stock (used when user is buying stock)
    public StockProfile searchAvailableStock(String stockName) {
        System.out.println("inside searchAvailableStock"+ stocks);
        
        for (StockProfile[] stockArray : stocks) {
            System.out.println("inside searchAvailableStock- for loop"+ stockArray);
            for (StockProfile stock : stockArray) {
                System.out.println("inside searchAvailableStock- 2nd for loop");
                if (stock.getProfileName().equalsIgnoreCase(stockName)) {

                    return stock;
                    
                }
                System.out.println("inside searchAvailableStock- 2nd for loop"+stock);
            }

        }
        return null;
    }
    
    // Rounding to 2 decimal place
    public static Double roundTo2DP(double number) {
        DecimalFormat roundFormat = new DecimalFormat(".##");
        return (Double.parseDouble(roundFormat.format(number)));
    }
    
    
}
