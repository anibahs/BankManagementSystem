/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.bms.ui.investmentbank;

import com.bms.model.investmentbank.AccountProfile;
import com.bms.model.investmentbank.CompanyStock;
import com.bms.model.investmentbank.CurrencyStock;
import com.bms.model.investmentbank.StockProfile;
import java.awt.CardLayout;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;

/**
 *
 * @author asawari
 */
public class InvestmentMainJPanel extends javax.swing.JPanel {

    /**
     * Creates new form InvestmentMainJPanel
     */
    JPanel cards;
    CardLayout cl;
    AccountProfile accProfile;
    public static final String HISTORYFILEPATH = "src/com/bms/model/investmentbank/history/";
    
    
    
    public InvestmentMainJPanel(JPanel cards) throws IOException  {
        System.out.print("inside investment");
 //       try {
 
            initComponents();
            
            System.out.print("inside investment");   
            this.cards = cards;
            this.cl =  (CardLayout)cards.getLayout();
           
            System.out.print("inside card layout");  
            AccountProfile accProfile = accountCreation();
            
            StockProfile[][] stockProfile = createAllStocks();
            
            System.out.print("inside");
            deleteHistoryFiles(new File(HISTORYFILEPATH));
            createHistoryFiles(stockProfile);
            this.cards = cards;
            this.cl =  (CardLayout)cards.getLayout();
            
            //window.setVisible(true);
           
            //System.out.print("inside MakeInvestmentJPanel");
            
  //      } catch (IOException ex) {
  //          Logger.getLogger(InvestmentMainJPanel.class.getName()).log(Level.SEVERE, null, ex);
  //      }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();

        jLabel2.setText("ABC");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(240, 240, 240)
                .addComponent(jLabel2)
                .addContainerGap(385, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(212, 212, 212)
                .addComponent(jLabel2)
                .addContainerGap(281, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
// Using a timer to recalculate the stock rates every 5 seconds and display them
    public static void recalculationLoop(StockProfile[][] stockProfile, MakeInvestmentJPanel window) {
        Timer t1 = new Timer();
        t1.schedule(new TimerTask() {
            @Override
            public void run() {
                recalulationPrice(stockProfile);
                window.setTextBoxValues(stockProfile);

            }
        }, 0, 5000);
    }

    // Function to create an account profile for the user
    public AccountProfile accountCreation() {
       
        System.out.println("inside account craetion() method");
        
        CreateAccountJPanel accCreate = new CreateAccountJPanel(cards);
        cards.add(accCreate, "ACPanel");
        //cl.addLayoutComponent(this, SOMEBITS);
        //splitPane.setRightComponent(cards);
        cl.show(cards, "ACPanel");
        
        System.out.println("account created successfully");
 
        AccountProfile accProfile = accCreate.getAccountProfile();
        //System.out.println("accountCreation---accProfile" + accProfile);
        return accProfile;
        
    }
    
    // Procedure to recalculate the stock rate when called on by the timer
    public static void recalulationPrice(StockProfile[][] stocks) {

        Random number = new Random();

        double priceChange;
        StockProfile stockToEdit;

        for (StockProfile[] stockArray : stocks) {
            for (StockProfile stock : stockArray) {
                priceChange = number.nextDouble() + 0.1;
                int increaseORdecrease = number.nextInt(10) + 1;

                stockToEdit = stock;
                if (increaseORdecrease > 6) {
                    increasePrice(stockToEdit, priceChange);

                } else {
                    decreasePrice(stockToEdit, priceChange);
                }

            }
        }

    }
    
    // Setting the stock rates once they have been recalculated
    public static void setPriceChange(StockProfile profile, double sellChange, double buyChange) {
        double difference = ((sellChange - profile.getSellPrice()) / profile.getSellPrice() * 100);
        profile.setChange(roundTo2DP(difference));
        profile.setSellPrice(roundTo4DP(sellChange));
        profile.setBuyPrice(roundTo4DP(buyChange));

    }
    
    // Calculating an increase in stock price
    public static void increasePrice(StockProfile profile, double priceChange) {
        double sellChange = priceChange
                + (profile.getSellPrice() + ((profile.getSellPrice() * profile.getMargin()) / 2));
        double buyChange = priceChange
                + (profile.getBuyPrice() + ((profile.getBuyPrice() * profile.getMargin()) / 2));

        setPriceChange(profile, sellChange, buyChange);

    }
    
    // Calculating a decrease in stock price
    public static void decreasePrice(StockProfile profile, double priceChange) {
        double sellChange = priceChange
                + (profile.getSellPrice() - ((profile.getSellPrice() * profile.getMargin()) / 2));
        double buyChange = priceChange
                + (profile.getBuyPrice() + ((profile.getBuyPrice() * profile.getMargin()) / 2));

        setPriceChange(profile, sellChange, buyChange);

    }
    
    // Rounding to 2 decimal place
    public static Double roundTo2DP(double number) {
        DecimalFormat roundFormat = new DecimalFormat(".##");
        return (Double.parseDouble(roundFormat.format(number)));
    }

    // Rounding to 4 decimal place
    public static Double roundTo4DP(double number) {
        DecimalFormat roundFormat = new DecimalFormat(".####");
        return (Double.parseDouble(roundFormat.format(number)));
    }
    
    // Creating all stock profiles
    public static StockProfile[][] createAllStocks() {
        // BASIC INFORMATION FOR CURRENCY STOCK
        String[][] from_To = {{"EUR", "USD"}, {"GBP", "USD"}, {"EUR", "GBP"}, {"GBP", "JPY"}};
        double[][] currencyPrice = {{1.2183, 1.2185}, {1.3767, 1.3768}, {0.88491, 0.88511},
        {147.279, 147.320}};

        // BASIC INFORMATION FOR COMPANY STOCK
        String[] companyName = {"Facebook", "Apple", "Microsoft", "BMW"};
        double[] companyMargin = {0.05, 0.05, 0.05, 0.5};
        double[][] companyPrice = {{178.31, 178.56}, {178.12, 178.37}, {93.96, 93.05}, {85.87, 85.99}};

       

        StockProfile[][] stocks = {createCurrencyStock(from_To, currencyPrice),
            createCompanyStock(companyName, companyMargin, companyPrice)};

        return stocks;
    }

    // Function to create the currency stocks
    public static CurrencyStock[] createCurrencyStock(String[][] from_To, double[][] price) {
        CurrencyStock[] stocks = new CurrencyStock[from_To.length];

        for (int i = 0; i < from_To.length; i++) {
            stocks[i] = new CurrencyStock(from_To[i][0], from_To[i][1], price[i][0], price[i][1]);

        }

        return stocks;
    }

    // Function to create the company stocks
    public static CompanyStock[] createCompanyStock(String[] companyName, double[] margin, double[][] price) {
        CompanyStock[] stocks = new CompanyStock[companyName.length];

        for (int i = 0; i < companyName.length; i++) {

            stocks[i] = new CompanyStock(companyName[i], margin[i], price[i][0], price[i][1]);

        }

        return stocks;
    }

    

    // Procedure to create the history files
    public static void createHistoryFiles(StockProfile[][] stocks) throws IOException {

        String fileName;
        FileWriter fileWriter;

        for (StockProfile[] stockArray : stocks) {
            for (StockProfile stock : stockArray) {
                fileName = stock.getProfileName() + ".csv";
                fileWriter = new FileWriter(HISTORYFILEPATH + fileName);
            }
        }

    }

    // Procedure to delete the history files
    public static void deleteHistoryFiles(File directory) {
        for (File file : directory.listFiles()) {
            if (!file.isDirectory()) {
                file.delete();
            }
        }

    }
}
